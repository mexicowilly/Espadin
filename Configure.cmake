INCLUDE(CheckCXXCompilerFlag)

OPTION(ENABLE_SHARED "Whether to build a shared object" OFF)
OPTION(ENABLE_FRAMEWORK "Whether to build as a framework on Macintosh" ON)
IF(CMAKE_SYSTEM_NAME STREQUAL Linux AND CMAKE_CXX_COMPILER_ID MATCHES Clang)
    OPTION(CLANG_LIBSTDCXX "Whether to use libstdc++ with the Clang compiler" ON)
ELSE()
    OPTION(CLANG_LIBSTDCXX "Whether to use libstdc++ with the Clang compiler" OFF)
ENDIF()


IF(CMAKE_SYSTEM_NAME STREQUAL Windows)
    SET(ESPADIN_WINDOWS TRUE)
ELSEIF(CMAKE_SYSTEM_NAME STREQUAL Linux)
    SET(ESPADIN_LINUX TRUE)
ELSEIF(CMAKE_SYSTEM_NAME STREQUAL SunOS)
    SET(ESPADIN_SOLARIS TRUE)
ELSEIF(CMAKE_SYSTEM_NAME STREQUAL FreeBSD)
    SET(ESPADIN_FREEBSD TRUE)
ELSEIF(CMAKE_SYSTEM_NAME STREQUAL NetBSD)
    SET(ESPADIN_NETBSD TRUE)
ELSEIF(CMAKE_SYSTEM_NAME STREQUAL OpenBSD)
    SET(ESPADIN_OPENBSD TRUE)
ELSEIF(CMAKE_SYSTEM_NAME STREQUAL Darwin)
    SET(ESPADIN_MACINTOSH TRUE)
ELSEIF(CMAKE_SYSTEM_NAME STREQUAL AIX)
    SET(ESPADIN_AIX TRUE)
ELSEIF(CYGWIN)
    SET(ESPADIN_CYGWIN TRUE)
ENDIF()
IF(CMAKE_SYSTEM_NAME MATCHES "^.+BSD$")
    SET(ESPADIN_BSD TRUE)
ENDIF()
IF(NOT ESPADIN_WINDOWS)
    SET(ESPADIN_POSIX TRUE)
ENDIF()

# Set default build type
IF(NOT CMAKE_BUILD_TYPE)
    SET(CMAKE_BUILD_TYPE Release CACHE STRING "Build type, one of: Release, Debug, RelWithDebInfo, or MinSizeRel" FORCE)
ENDIF()
MESSAGE(STATUS "Build type -- ${CMAKE_BUILD_TYPE}")

# Standards
IF(NOT CMAKE_CXX_COMPILER_ID STREQUAL SunPro)
    SET(CMAKE_CXX_STANDARD 17)
    SET(CMAKE_CXX_STANDARD_REQUIRED TRUE)
ENDIF()

# Compiler flags
IF(CMAKE_CXX_COMPILER_ID MATCHES Clang)
    IF(CLANG_LIBSTDCXX)
        SET(ESPADIN_LIBCXX_FLAG -stdlib=libstdc++)
    ELSE()
        SET(ESPADIN_LIBCXX_FLAG -stdlib=libc++)
    ENDIF()
    CHECK_CXX_COMPILER_FLAG(${ESPADIN_LIBCXX_FLAG} ESPADIN_HAS_LIBCXX_FLAG)
    IF(ESPADIN_HAS_LIBCXX_FLAG)
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${ESPADIN_LIBCXX_FLAG}")
    ELSE()
        MESSAGE(FATAL_ERROR "${ESPADIN_LIBCXX_FLAG} is required")
    ENDIF()
    IF(ENABLE_SHARED)
        CHECK_CXX_COMPILER_FLAG(-fvisibility=hidden ESPADIN_VIS_FLAG)
        IF(ESPADIN_VIS_FLAG)
            SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -fvisibility=hidden")
            SET(ESPADIN_SO_FLAGS "-fvisibility=hidden")
        ENDIF()
    ENDIF()
    IF(CMAKE_GENERATOR STREQUAL Xcode)
        SET(CMAKE_EXE_LINKER_FLAGS "-std=c++17 ${ESPADIN_LIBCXX_FLAG}")
    ENDIF()
    CHECK_CXX_COMPILER_FLAG(-Wno-potentially-evaluated-expression ESPADIN_HAVE_NO_POT_EVAL_EXP)
    IF(ESPADIN_HAVE_NO_POT_EVAL_EXP)
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-potentially-evaluated-expression")
    ENDIF()
    SET(ESPADIN_REQUIRED_FLAGS -std=c++17)
ELSEIF(CMAKE_COMPILER_IS_GNUCXX)
    IF(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.7)
        MESSAGE(FATAL_ERROR "g++ version 4.7 or later is required")
    ENDIF()
    IF(ENABLE_SHARED)
        CHECK_CXX_COMPILER_FLAG(-fvisibility=hidden ESPADIN_VIS_FLAG)
        IF(ESPADIN_VIS_FLAG)
            SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -fvisibility=hidden")
            SET(ESPADIN_SO_FLAGS "-fvisibility=hidden")
        ENDIF()
    ENDIF()
    SET(ESPADIN_REQUIRED_FLAGS -std=c++17)
ELSEIF(MSVC)
    IF(MSVC_VERSION LESS 1700)
        MESSAGE(FATAL_ERROR "Microsoft compiler version 17 or later is required (the compiler that ships with Visual Studio 2012)")
    ENDIF()
    IF(ENABLE_SHARED)
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4275 /EHsc")
    ENDIF()
    ADD_DEFINITIONS(-DNOMINMAX)
ELSEIF(CMAKE_CXX_COMPILER_ID STREQUAL SunPro)
    IF(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 5.15.0)
        MESSAGE(FATAL_ERROR "CC version 5.15.0 or later is required")
    ENDIF()
    # Set the flag unconditionally because of weirdness with setting
    # the CXX standard to 14.
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17")
    CHECK_CXX_COMPILER_FLAG(-errtags=yes ESPADIN_HAVE_ERRTAGS)
    IF(ESPADIN_HAVE_ERRTAGS)
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -errtags=yes")
    ENDIF()
    CHECK_C_COMPILER_FLAG(-errtags=yes ESPADIN_HAVE_C_ERRTAGS)
    IF(ESPADIN_HAVE_ERRTAGS)
        SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -errtags=yes")
    ENDIF()
    SET(ESPADIN_SUNPRO_DISABLED_WARNINGS nonewline,wbadlkginit)
    CHECK_CXX_COMPILER_FLAG(-erroff=${ESPADIN_SUNPRO_DISABLED_WARNINGS} ESPADIN_HAVE_ERROFF)
    IF(ESPADIN_HAVE_ERROFF)
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -erroff=${ESPADIN_SUNPRO_DISABLED_WARNINGS}")
    ELSE()
        MESSAGE(FATAL_ERROR "-erroff=${ESPADIN_SUNPRO_DISABLED_WARNINGS} is required")
    ENDIF()
    SET(ESPADIN_SUNPRO_C_DISABLED_WARNINGS E_NEWLINE_NOT_LAST)
    CHECK_C_COMPILER_FLAG(-erroff=${ESPADIN_SUNPRO_C_DISABLED_WARNINGS} ESPADIN_HAVE_C_ERROFF)
    IF(ESPADIN_HAVE_C_ERROFF)
        SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -erroff=${ESPADIN_SUNPRO_C_DISABLED_WARNINGS}")
    ELSE()
        MESSAGE(FATAL_ERROR "-erroff=${ESPADIN_SUNPRO_DISABLED_WARNINGS} is required")
    ENDIF()
    ADD_DEFINITIONS(-D_POSIX_PTHREAD_SEMANTICS)
ENDIF()

# Configure our export definitions
IF(ENABLE_SHARED)
    # Do we want to export private symbols for testing?
    IF(ESPADIN_PRIV_EXPORT)
        ADD_DEFINITIONS(-DESPADIN_PRIV_EXPORT=ESPADIN_EXPORT)
    ENDIF()
ELSE()
    SET(ESPADIN_STATIC TRUE)
ENDIF()
CONFIGURE_FILE(include/espadin/export.hpp.in "${CMAKE_BINARY_DIR}/espadin/export.hpp")

# CURL
FIND_PACKAGE(CURL REQUIRED)

# Chucho
FIND_PATH(ESPADIN_CHUCHO_INCLUDE_DIR chucho/log.hpp PATHS "${CHUCHO_INCLUDE_DIR}")
IF(NOT ESPADIN_CHUCHO_INCLUDE_DIR)
    MESSAGE(FATAL_ERROR "Set CHUCHO_INCLUDE_DIR")
ENDIF()
FIND_LIBRARY(ESPADIN_CHUCHO_LIB chucho PATHS "${CHUCHO_LIB_DIR}")
IF(NOT ESPADIN_CHUCHO_LIB)
    MESSAGE(FATAL_ERROR "Set CHUCHO_LIB_DIR")
ENDIF()

# Gtest
FIND_PACKAGE(GTest)